import "@vidstack/foundation/shims/install-safe.js";

// src/shared/with-media.tsx
import { isFunction } from "@vidstack/foundation";
import React, { forwardRef, useState as useState2 } from "react";

// src/shared/use-media.ts
import {
  MEDIA_STORE_DEFAULTS,
  MediaRemoteControl
} from "@vidstack/player";
import {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState
} from "react";
var MediaElementContext = createContext(null);
function useMediaElement() {
  return useContext(MediaElementContext);
}
function useMediaContext(media) {
  const [_, update] = useState(0);
  const subscriptions = useRef(/* @__PURE__ */ new Map());
  const mediaElement = useMediaElement();
  const [currentMedia, setCurrentMedia] = useState(null);
  useEffect(() => {
    setCurrentMedia((media && "current" in media ? media.current : media) ?? mediaElement);
  }, [media, mediaElement]);
  function subscribe(prop) {
    if (subscriptions.current.get(prop))
      return;
    subscriptions.current.set(
      prop,
      currentMedia == null ? void 0 : currentMedia.controller.store[prop].subscribe(() => {
        update((n) => n + 1);
      })
    );
  }
  const proxy = useMemo(() => {
    const context = (currentMedia == null ? void 0 : currentMedia.controller.state) ?? MEDIA_STORE_DEFAULTS;
    return new Proxy(context, {
      get(_2, prop) {
        subscribe(prop);
        return context[prop];
      }
    });
  }, [currentMedia]);
  useEffect(() => {
    for (const prop of subscriptions.current.keys()) {
      subscribe(prop);
    }
    return () => {
      var _a;
      for (const prop of subscriptions.current.keys()) {
        (_a = subscriptions.current.get(prop)) == null ? void 0 : _a();
        subscriptions.current.set(prop, void 0);
      }
    };
  }, [currentMedia]);
  return proxy;
}
function useMediaRemote(target) {
  const mediaElement = useMediaElement();
  const remote = useRef(new MediaRemoteControl());
  const [currentTarget, setCurrentTarget] = useState(null);
  useEffect(() => {
    setCurrentTarget((target && "current" in target ? target.current : target) ?? mediaElement);
  }, [target, mediaElement]);
  useEffect(() => {
    remote.current.setTarget(currentTarget);
    return () => {
      remote.current.setTarget(null);
    };
  }, [currentTarget]);
  return remote.current;
}

// src/shared/with-media.tsx
function withMedia(WrappedMedia) {
  const hoc = forwardRef(({ children, ...props }, _ref) => {
    const [ref, setRef] = useState2(null);
    return /* @__PURE__ */ React.createElement(MediaElementContext.Provider, {
      value: ref
    }, /* @__PURE__ */ React.createElement(WrappedMedia, {
      ...props,
      ref: (el) => {
        setRef(el);
        if (isFunction(_ref)) {
          _ref(el);
        } else if (_ref) {
          _ref.current = el;
        }
      }
    }, children));
  });
  hoc.displayName = "WithMediaHOC";
  return hoc;
}

// src/node/_components/Media.ts
import * as React2 from "react";

// src/node/lib/create-component.ts
import { camelToKebabCase } from "@vidstack/foundation";
import { execSync } from "child_process";
import path from "path";
import { renderToString } from "react-dom/server";
import { fileURLToPath } from "url";
var ssrInProgress = false;
var tags = /* @__PURE__ */ new Set();
var blacklist = /* @__PURE__ */ new Set(["children", "localName", "ref", "style", "className"]);
var ssrFile = path.resolve(path.dirname(fileURLToPath(import.meta.url)), "./exec-ssr.js");
var camelCaseRE = /[a-z][A-Z]/g;
var createComponent = (React21, tagName, { skipSSR = false } = {}) => {
  const Component = React21.Component;
  const createElement = React21.createElement;
  class ReactComponent extends Component {
    render() {
      tags.add(tagName);
      const props = { ...this.props };
      delete props.__forwardedRef;
      for (const prop of Object.keys(props)) {
        if (prop.startsWith("_") || blacklist.has(prop) || typeof props[prop] === "function") {
          continue;
        }
        if (typeof props[prop] === "object") {
          props[prop] = JSON.stringify(props[prop]);
        }
        if (camelCaseRE.test(prop)) {
          props[camelToKebabCase(prop)] = props[prop];
          delete props[prop];
        }
      }
      if (!ssrInProgress && !skipSSR) {
        ssrInProgress = true;
        const openTag = `<${tagName}>`;
        const closeTag = `</${tagName}>`;
        const html = `${openTag}${renderToString(props.children)}${closeTag}`;
        try {
          const ssrResult = execSync(
            `node --unhandled-rejections=strict --abort-on-uncaught-exception ${ssrFile}`,
            {
              env: { ...process.env, html, tagNames: JSON.stringify(Array.from(tags)) }
            }
          ).toString();
          props.dangerouslySetInnerHTML = {
            __html: ssrResult.slice(openTag.length, -closeTag.length)
          };
          delete props.children;
        } catch (e) {
          console.error(e);
        }
        ssrInProgress = false;
      }
      return createElement(tagName, props);
    }
  }
  const ForwardedComponent = React21.forwardRef(
    (props, ref) => createElement(ReactComponent, { ...props, __forwardedRef: ref }, props == null ? void 0 : props.children)
  );
  return ForwardedComponent;
};

// src/node/_components/Media.ts
var Media_default = /* @__PURE__ */ createComponent(React2, "vds-media");

// src/node/_components/MediaVisibility.ts
import * as React3 from "react";
var MediaVisibility_default = /* @__PURE__ */ createComponent(React3, "vds-media-visibility");

// src/node/_components/Video.ts
import * as React4 from "react";
var Video_default = /* @__PURE__ */ createComponent(React4, "vds-video");

// src/node/_components/FullscreenButton.ts
import * as React5 from "react";
var FullscreenButton_default = /* @__PURE__ */ createComponent(React5, "vds-fullscreen-button");

// src/node/_components/Gesture.ts
import * as React6 from "react";
var Gesture_default = /* @__PURE__ */ createComponent(React6, "vds-gesture");

// src/node/_components/MuteButton.ts
import * as React7 from "react";
var MuteButton_default = /* @__PURE__ */ createComponent(React7, "vds-mute-button");

// src/node/_components/Poster.ts
import * as React8 from "react";
var Poster_default = /* @__PURE__ */ createComponent(React8, "vds-poster");

// src/node/_components/PlayButton.ts
import * as React9 from "react";
var PlayButton_default = /* @__PURE__ */ createComponent(React9, "vds-play-button");

// src/node/_components/AspectRatio.ts
import * as React10 from "react";
var AspectRatio_default = /* @__PURE__ */ createComponent(React10, "vds-aspect-ratio");

// src/node/_components/MediaSync.ts
import * as React11 from "react";
var MediaSync_default = /* @__PURE__ */ createComponent(React11, "vds-media-sync");

// src/node/_components/Slider.ts
import * as React12 from "react";
var Slider_default = /* @__PURE__ */ createComponent(React12, "vds-slider");

// src/node/_components/SliderValueText.ts
import * as React13 from "react";
var SliderValueText_default = /* @__PURE__ */ createComponent(React13, "vds-slider-value-text");

// src/node/_components/Time.ts
import * as React14 from "react";
var Time_default = /* @__PURE__ */ createComponent(React14, "vds-time");

// src/node/_components/SliderVideo.ts
import * as React15 from "react";
var SliderVideo_default = /* @__PURE__ */ createComponent(React15, "vds-slider-video");

// src/node/_components/Hls.ts
import * as React16 from "react";
var Hls_default = /* @__PURE__ */ createComponent(React16, "vds-hls");

// src/node/_components/VolumeSlider.ts
import * as React17 from "react";
var VolumeSlider_default = /* @__PURE__ */ createComponent(React17, "vds-volume-slider");

// src/node/_components/TimeSlider.ts
import * as React18 from "react";
var TimeSlider_default = /* @__PURE__ */ createComponent(React18, "vds-time-slider");

// src/node/_components/Audio.ts
import * as React19 from "react";
var Audio_default = /* @__PURE__ */ createComponent(React19, "vds-audio");

// src/node/_components/ToggleButton.ts
import * as React20 from "react";
var ToggleButton_default = /* @__PURE__ */ createComponent(React20, "vds-toggle-button");

// src/node/index.ts
var Media = /* @__PURE__ */ withMedia(Media_default);
export {
  AspectRatio_default as AspectRatio,
  Audio_default as Audio,
  FullscreenButton_default as FullscreenButton,
  Gesture_default as Gesture,
  Hls_default as Hls,
  Media,
  MediaElementContext,
  MediaSync_default as MediaSync,
  MediaVisibility_default as MediaVisibility,
  MuteButton_default as MuteButton,
  PlayButton_default as PlayButton,
  Poster_default as Poster,
  Slider_default as Slider,
  SliderValueText_default as SliderValueText,
  SliderVideo_default as SliderVideo,
  Time_default as Time,
  TimeSlider_default as TimeSlider,
  ToggleButton_default as ToggleButton,
  Video_default as Video,
  VolumeSlider_default as VolumeSlider,
  useMediaContext,
  useMediaElement,
  useMediaRemote
};
