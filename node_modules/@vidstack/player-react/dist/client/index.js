// src/shared/with-media.tsx
import { isFunction } from "@vidstack/foundation";
import React, { forwardRef, useState as useState2 } from "react";

// src/shared/use-media.ts
import {
  MEDIA_STORE_DEFAULTS,
  MediaRemoteControl
} from "@vidstack/player";
import {
  createContext,
  useContext,
  useEffect,
  useMemo,
  useRef,
  useState
} from "react";
var MediaElementContext = createContext(null);
function useMediaElement() {
  return useContext(MediaElementContext);
}
function useMediaContext(media) {
  const [_, update] = useState(0);
  const subscriptions = useRef(/* @__PURE__ */ new Map());
  const mediaElement = useMediaElement();
  const [currentMedia, setCurrentMedia] = useState(null);
  useEffect(() => {
    setCurrentMedia((media && "current" in media ? media.current : media) ?? mediaElement);
  }, [media, mediaElement]);
  function subscribe(prop) {
    if (subscriptions.current.get(prop))
      return;
    subscriptions.current.set(
      prop,
      currentMedia?.controller.store[prop].subscribe(() => {
        update((n) => n + 1);
      })
    );
  }
  const proxy = useMemo(() => {
    const context = currentMedia?.controller.state ?? MEDIA_STORE_DEFAULTS;
    return new Proxy(context, {
      get(_2, prop) {
        subscribe(prop);
        return context[prop];
      }
    });
  }, [currentMedia]);
  useEffect(() => {
    for (const prop of subscriptions.current.keys()) {
      subscribe(prop);
    }
    return () => {
      for (const prop of subscriptions.current.keys()) {
        subscriptions.current.get(prop)?.();
        subscriptions.current.set(prop, void 0);
      }
    };
  }, [currentMedia]);
  return proxy;
}
function useMediaRemote(target) {
  const mediaElement = useMediaElement();
  const remote = useRef(new MediaRemoteControl());
  const [currentTarget, setCurrentTarget] = useState(null);
  useEffect(() => {
    setCurrentTarget((target && "current" in target ? target.current : target) ?? mediaElement);
  }, [target, mediaElement]);
  useEffect(() => {
    remote.current.setTarget(currentTarget);
    return () => {
      remote.current.setTarget(null);
    };
  }, [currentTarget]);
  return remote.current;
}

// src/shared/with-media.tsx
function withMedia(WrappedMedia) {
  const hoc = forwardRef(({ children, ...props }, _ref) => {
    const [ref, setRef2] = useState2(null);
    return /* @__PURE__ */ React.createElement(MediaElementContext.Provider, {
      value: ref
    }, /* @__PURE__ */ React.createElement(WrappedMedia, {
      ...props,
      ref: (el) => {
        setRef2(el);
        if (isFunction(_ref)) {
          _ref(el);
        } else if (_ref) {
          _ref.current = el;
        }
      }
    }, children));
  });
  hoc.displayName = "WithMediaHOC";
  return hoc;
}

// src/client/_components/Media.ts
import { MediaElement } from "@vidstack/player";
import * as React2 from "react";

// src/client/lib/create-component.ts
import { safelyDefineCustomElement } from "@vidstack/foundation";

// src/client/lib/utils.ts
function setProperty(node, name, value, old) {
  if (name.startsWith("onVds") && value !== old) {
    const eventType = name.replace("on", "").replace(/[A-Z]/g, (x) => `-${x[0].toLowerCase()}`).slice(1);
    updateEventListener(node, eventType, value);
  } else {
    node[name] = value;
  }
}
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else {
    ref.current = value;
  }
}
var eventHandlers = /* @__PURE__ */ new WeakMap();
function updateEventListener(node, eventType, listener) {
  let events = eventHandlers.get(node);
  if (events === void 0) {
    eventHandlers.set(node, events = /* @__PURE__ */ new Map());
  }
  let handler = events.get(eventType);
  if (listener !== void 0) {
    if (handler === void 0) {
      events.set(eventType, handler = { handleEvent: listener });
      node.addEventListener(eventType, handler);
    } else {
      handler.handleEvent = listener;
    }
    return;
  }
  if (handler !== void 0) {
    events.delete(eventType);
    node.removeEventListener(eventType, handler);
  }
}

// src/client/lib/create-component.ts
var blacklist = /* @__PURE__ */ new Set(["children", "localName", "ref", "style", "className"]);
var createComponent = (React21, tagName, elementClass) => {
  const Component = React21.Component;
  const createElement = React21.createElement;
  const whitelist = /* @__PURE__ */ new Set();
  for (const p in elementClass.prototype) {
    if (!(p in HTMLElement.prototype)) {
      whitelist.add(p);
    }
  }
  class ReactComponent extends Component {
    constructor(props) {
      super(props);
      this._element = null;
      safelyDefineCustomElement(tagName, elementClass);
    }
    _updateElement(oldProps) {
      if (this._element === null)
        return;
      for (const prop in this._elementProps) {
        setProperty(
          this._element,
          prop,
          this.props[prop],
          oldProps ? oldProps[prop] : void 0
        );
      }
    }
    componentDidMount() {
      this._updateElement();
    }
    componentDidUpdate(old) {
      this._updateElement(old);
    }
    render() {
      const userRef = this.props.__forwardedRef;
      if (this._ref === void 0 || this._userRef !== userRef) {
        this._ref = (value) => {
          if (this._element === null) {
            this._element = value;
          }
          if (userRef !== null) {
            setRef(userRef, value);
          }
          this._userRef = userRef;
        };
      }
      const props = { ref: this._ref, suppressHydrationWarning: true };
      this._elementProps = {};
      for (const [prop, value] of Object.entries(this.props)) {
        if (prop === "__forwardedRef")
          continue;
        if (!blacklist.has(prop) && (whitelist.has(prop) || prop.startsWith("onVds"))) {
          this._elementProps[prop] = value;
        } else {
          props[prop === "className" ? "class" : prop] = value;
        }
      }
      return createElement(tagName, props);
    }
  }
  ReactComponent.displayName = elementClass.name.replace("Element", "");
  const ForwardedComponent = React21.forwardRef(
    (props, ref) => createElement(
      ReactComponent,
      { ...props, __forwardedRef: ref },
      props?.children
    )
  );
  ForwardedComponent.displayName = ReactComponent.displayName;
  return ForwardedComponent;
};

// src/client/_components/Media.ts
var Media_default = /* @__PURE__ */ createComponent(React2, "vds-media", MediaElement);

// src/client/_components/MediaVisibility.ts
import { MediaVisibilityElement } from "@vidstack/player";
import * as React3 from "react";
var MediaVisibility_default = /* @__PURE__ */ createComponent(React3, "vds-media-visibility", MediaVisibilityElement);

// src/client/_components/Video.ts
import { VideoElement } from "@vidstack/player";
import * as React4 from "react";
var Video_default = /* @__PURE__ */ createComponent(React4, "vds-video", VideoElement);

// src/client/_components/FullscreenButton.ts
import { FullscreenButtonElement } from "@vidstack/player";
import * as React5 from "react";
var FullscreenButton_default = /* @__PURE__ */ createComponent(React5, "vds-fullscreen-button", FullscreenButtonElement);

// src/client/_components/Gesture.ts
import { GestureElement } from "@vidstack/player";
import * as React6 from "react";
var Gesture_default = /* @__PURE__ */ createComponent(React6, "vds-gesture", GestureElement);

// src/client/_components/MuteButton.ts
import { MuteButtonElement } from "@vidstack/player";
import * as React7 from "react";
var MuteButton_default = /* @__PURE__ */ createComponent(React7, "vds-mute-button", MuteButtonElement);

// src/client/_components/Poster.ts
import { PosterElement } from "@vidstack/player";
import * as React8 from "react";
var Poster_default = /* @__PURE__ */ createComponent(React8, "vds-poster", PosterElement);

// src/client/_components/PlayButton.ts
import { PlayButtonElement } from "@vidstack/player";
import * as React9 from "react";
var PlayButton_default = /* @__PURE__ */ createComponent(React9, "vds-play-button", PlayButtonElement);

// src/client/_components/AspectRatio.ts
import { AspectRatioElement } from "@vidstack/player";
import * as React10 from "react";
var AspectRatio_default = /* @__PURE__ */ createComponent(React10, "vds-aspect-ratio", AspectRatioElement);

// src/client/_components/MediaSync.ts
import { MediaSyncElement } from "@vidstack/player";
import * as React11 from "react";
var MediaSync_default = /* @__PURE__ */ createComponent(React11, "vds-media-sync", MediaSyncElement);

// src/client/_components/Slider.ts
import { SliderElement } from "@vidstack/player";
import * as React12 from "react";
var Slider_default = /* @__PURE__ */ createComponent(React12, "vds-slider", SliderElement);

// src/client/_components/SliderValueText.ts
import { SliderValueTextElement } from "@vidstack/player";
import * as React13 from "react";
var SliderValueText_default = /* @__PURE__ */ createComponent(React13, "vds-slider-value-text", SliderValueTextElement);

// src/client/_components/Time.ts
import { TimeElement } from "@vidstack/player";
import * as React14 from "react";
var Time_default = /* @__PURE__ */ createComponent(React14, "vds-time", TimeElement);

// src/client/_components/SliderVideo.ts
import { SliderVideoElement } from "@vidstack/player";
import * as React15 from "react";
var SliderVideo_default = /* @__PURE__ */ createComponent(React15, "vds-slider-video", SliderVideoElement);

// src/client/_components/Hls.ts
import { HlsElement } from "@vidstack/player";
import * as React16 from "react";
var Hls_default = /* @__PURE__ */ createComponent(React16, "vds-hls", HlsElement);

// src/client/_components/VolumeSlider.ts
import { VolumeSliderElement } from "@vidstack/player";
import * as React17 from "react";
var VolumeSlider_default = /* @__PURE__ */ createComponent(React17, "vds-volume-slider", VolumeSliderElement);

// src/client/_components/TimeSlider.ts
import { TimeSliderElement } from "@vidstack/player";
import * as React18 from "react";
var TimeSlider_default = /* @__PURE__ */ createComponent(React18, "vds-time-slider", TimeSliderElement);

// src/client/_components/Audio.ts
import { AudioElement } from "@vidstack/player";
import * as React19 from "react";
var Audio_default = /* @__PURE__ */ createComponent(React19, "vds-audio", AudioElement);

// src/client/_components/ToggleButton.ts
import { ToggleButtonElement } from "@vidstack/player";
import * as React20 from "react";
var ToggleButton_default = /* @__PURE__ */ createComponent(React20, "vds-toggle-button", ToggleButtonElement);

// src/client/index.ts
var Media = /* @__PURE__ */ withMedia(Media_default);
export {
  AspectRatio_default as AspectRatio,
  Audio_default as Audio,
  FullscreenButton_default as FullscreenButton,
  Gesture_default as Gesture,
  Hls_default as Hls,
  Media,
  MediaElementContext,
  MediaSync_default as MediaSync,
  MediaVisibility_default as MediaVisibility,
  MuteButton_default as MuteButton,
  PlayButton_default as PlayButton,
  Poster_default as Poster,
  Slider_default as Slider,
  SliderValueText_default as SliderValueText,
  SliderVideo_default as SliderVideo,
  Time_default as Time,
  TimeSlider_default as TimeSlider,
  ToggleButton_default as ToggleButton,
  Video_default as Video,
  VolumeSlider_default as VolumeSlider,
  useMediaContext,
  useMediaElement,
  useMediaRemote
};
