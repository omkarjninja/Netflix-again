/// <reference types="@vidstack/foundation/globals" />
/// <reference types="@vidstack/player/globals" />

import { AspectRatioElement } from '@vidstack/player';
import { AudioElement } from '@vidstack/player';
import { Context } from 'react';
import { ForwardRefExoticComponent } from 'react';
import { FullscreenButtonElement } from '@vidstack/player';
import { GestureElement } from '@vidstack/player';
import { HlsElement } from '@vidstack/player';
import { MediaContext } from '@vidstack/player';
import { MediaElement } from '@vidstack/player';
import { MediaRemoteControl } from '@vidstack/player';
import { MediaSyncElement } from '@vidstack/player';
import { MediaVisibilityElement } from '@vidstack/player';
import { MuteButtonElement } from '@vidstack/player';
import type { PascalCase } from 'type-fest';
import { PlayButtonElement } from '@vidstack/player';
import { PosterElement } from '@vidstack/player';
import * as React_2 from 'react';
import { RefObject } from 'react';
import { SliderElement } from '@vidstack/player';
import { SliderValueTextElement } from '@vidstack/player';
import { SliderVideoElement } from '@vidstack/player';
import { TimeElement } from '@vidstack/player';
import { TimeSliderElement } from '@vidstack/player';
import { ToggleButtonElement } from '@vidstack/player';
import { VideoElement } from '@vidstack/player';
import { VolumeSliderElement } from '@vidstack/player';

/** This element creates a container that will hold the dimensions of the desired aspect ratio. This
 container is useful for reserving space for media as it loads over the network.

 ðŸ’¡  If your browser matrix supports the
 [`aspect-ratio`](https://developer.mozilla.org/en-US/docs/Web/CSS/aspect-ratio) CSS property
 then you can skip using this component, and set the desired aspect ratio directly on the
 provider element.

 ðŸ’¡ By default it respects the browser's default aspect-ratio for media. This is not specific
 to the loaded media but instead a general setting of `2/1`. */
export declare const AspectRatio: React_2.ForwardRefExoticComponent<VdsReactComponentProps<AspectRatioElement>>;

/** The `<vds-audio>` element adapts the underlying `<audio>` element to satisfy the media provider
 contract, which generally involves providing a consistent API for loading, managing, and
 tracking media state.

 Most the logic for this element is contained in the `Html5MediaElement` class because both the
 `<audio>` and `<video>` elements implement the native `HTMLMediaElement` interface. */
declare const Audio_2: React_2.ForwardRefExoticComponent<VdsReactComponentProps<AudioElement>>;
export { Audio_2 as Audio }

/** A button for toggling the fullscreen mode of the player.

 ðŸ’¡ The following attributes are applied:

 - `fullscreen`: Applied when the media has entered fullscreen.

 ðŸš¨ The `hidden` attribute will be present on this element in the event fullscreen cannot be
 requested (no support). There are default styles for this by setting the `display` property to
 `none`. Important to be aware of this and update it according to your needs. */
export declare const FullscreenButton: React_2.ForwardRefExoticComponent<VdsReactComponentProps<FullscreenButtonElement>>;

/** This element enables 'actions' to be performed on the media provider based on user gestures.

 The `GestureElement` can be used to build features such as:

 - Click the player to toggle playback.
 - Double-click the player to toggle fullscreen.
 - Tap the sides of the player to seek forwards or backwards.
 - Pause media when the user's mouse leaves the player.

 This is a simple list, but it should give you an idea on when to reach for this element. */
export declare const Gesture: React_2.ForwardRefExoticComponent<VdsReactComponentProps<GestureElement>>;

/** The `<vds-hls>` element adapts the underlying `<video>` element to satisfy the media provider
 contract, which generally involves providing a consistent API for loading, managing, and
 tracking media state.

 This element also introduces support for HLS streaming via the popular `hls.js` library.
 HLS streaming is either [supported natively](https://caniuse.com/?search=hls) (generally
 on iOS), or in environments that [support the Media Stream API](https://caniuse.com/?search=mediastream).

 ðŸ’¡ This element re-dispatches all `hls.js` events so you can listen for them through the
 native DOM interface (i.e., `vds-hls-media-attaching`). */
export declare const Hls: React_2.ForwardRefExoticComponent<VdsReactComponentProps<HlsElement>>;

/**
 * All media elements exist inside the `<vds-media>` component. It's main jobs are to host the
 * media controller, and expose media state through HTML attributes and CSS properties for styling
 * purposes.
 */
export declare const Media: ForwardRefExoticComponent<VdsReactComponentProps<MediaElement>>;

export declare const MediaElementContext: Context<MediaElement | null>;

/** This element is responsible for synchronizing elements of the type `MediaProviderElement`.

 Synchronization includes:

 - Single media playback (eg: user plays a video while another is already playing, so we pause
 the newly inactive player).

 - Synchronized media volume (eg: user sets desired volume to 50% on one player, and they expect
 it to be consistent across all players).

 - Saving media volume to local storage (eg: user sets desired to volume 50%, they leave
 the site, and when they come back they expect it to be 50% without any interaction). */
export declare const MediaSync: React_2.ForwardRefExoticComponent<VdsReactComponentProps<MediaSyncElement>>;

/** This element is responsible for managing a `MediaProviderElement` as viewport or page
 visibility changes occur.

 Management includes:

 - Playback or volume changes when page visibility changes (eg: user changes tab or device
 sleeps).

 - Playback or volume changes when viewport visibility changes (eg: user scrolls video in and
 out of view). */
export declare const MediaVisibility: React_2.ForwardRefExoticComponent<VdsReactComponentProps<MediaVisibilityElement>>;

/** A button for toggling the muted state of the player.

 ðŸ’¡ The following attributes are applied:

 - `muted`: Applied when media audio has been muted. */
export declare const MuteButton: React_2.ForwardRefExoticComponent<VdsReactComponentProps<MuteButtonElement>>;

/** A button for toggling the playback state (play/pause) of the current media.

 ðŸ’¡ The following attributes are applied:

 - `paused`: Applied when media playback has paused. */
export declare const PlayButton: React_2.ForwardRefExoticComponent<VdsReactComponentProps<PlayButtonElement>>;

/** Loads and displays the current media poster image. By default, the media provider's
 loading strategy is respected meaning the poster won't load until the media can.

 ðŸ’¡ The following img attributes are applied:

 - `img-loading`: When the poster image is in the process of being downloaded by the browser.
 - `img-loaded`: When the poster image has successfully loaded.
 - `img-error`: When the poster image has failed to load. */
export declare const Poster: React_2.ForwardRefExoticComponent<VdsReactComponentProps<PosterElement>>;

/** A custom built `input[type="range"]` that is cross-browser friendly, ARIA friendly, mouse/touch
 friendly and easily stylable. This component allows users to input numeric values between a
 minimum and maximum value.

 ðŸ’¡ The following attributes are available on the host element:

 - `pointing`: Whether a device pointer is within the slider bounds.
 - `dragging`: Whether the slider thumb is currently being dragged.
 - `interactive`: When either `pointing` or `dragging` is true. */
export declare const Slider: React_2.ForwardRefExoticComponent<VdsReactComponentProps<SliderElement>>;

/** Outputs the current slider value as text. */
export declare const SliderValueText: React_2.ForwardRefExoticComponent<VdsReactComponentProps<SliderValueTextElement>>;

/** Used to load a low-resolution video to be displayed when the user is hovering or dragging
 the slider. The point at which they're hovering or dragging (`pointerValue`) is the preview
 time position. The video will automatically be updated to match, so ensure it's of the same
 length as the original.

 ðŸ’¡ The following attributes are updated for your styling needs:

 - `video-can-play`: Applied when the video is ready for playback.
 - `video-error`: Applied when a media error has been encountered.

 ðŸ’¡ The `canplay` and `error` events are re-dispatched by this element for you to listen to if
 needed. */
export declare const SliderVideo: React_2.ForwardRefExoticComponent<VdsReactComponentProps<SliderVideoElement>>;

/** Outputs a media duration (eg: `currentTime`, `duration`, `bufferedAmount`, etc.) value as time
 formatted text. */
export declare const Time: React_2.ForwardRefExoticComponent<VdsReactComponentProps<TimeElement>>;

/** A slider that lets the user control the current media playback time. */
export declare const TimeSlider: React_2.ForwardRefExoticComponent<VdsReactComponentProps<TimeSliderElement>>;

/** The foundation for any toggle button such as a `play-button` or `mute-button`. */
export declare const ToggleButton: React_2.ForwardRefExoticComponent<VdsReactComponentProps<ToggleButtonElement>>;

/**
 * This hook is used to access the current media state on the nearest parent media element (i.e.,
 * `<vds-media>`). Any properties you access here are subscribed to for live updates.
 *
 * @example
 * ```tsx
 * import { useMediaContext } from '@vidstack/player-react';
 *
 * function Component() {
 *  const { playing } = useMediaContext();
 *  return <div>{playing ? 'Media is paused.' : 'Media is playing.'}</div>
 * }
 * ```
 */
export declare function useMediaContext(media?: MediaElement | null | RefObject<MediaElement>): Readonly<MediaContext>;

/**
 * Returns the nearest parent media element (i.e., `<vds-media>`).
 */
export declare function useMediaElement(): MediaElement | null;

/**
 * A media remote provides a simple facade for dispatching media requests to the nearest media
 * controller.
 *
 * @param target - The DOM event target to dispatch request events from.
 *
 * @example
 * ```tsx
 * import { useMediaRemote } from '@vidstack/player-react';
 *
 * function PlayButton() {
 *   const remote = useMediaRemote();
 *   return <button onPointerUp={({ nativeEvent }) => remote.play(nativeEvent)}>Play</button>;
 * }
 * ```
 */
export declare function useMediaRemote(target?: EventTarget | null | RefObject<EventTarget>): MediaRemoteControl;

export declare type VdsElementEventCallbackMap = {
    [Event in keyof VdsElementEventMap as `on${PascalCase<Event>}`]: (event: VdsElementEventMap[Event]) => void;
};

export declare type VdsReactComponentProps<E extends HTMLElement> = Partial<Omit<E, 'children'>> & Partial<VdsElementEventCallbackMap> & React.HTMLAttributes<E> & {
    ref?: React.Ref<E> | undefined;
    children?: React.ReactNode | undefined;
};

/** The `<vds-video>` element adapts the underlying `<video>` element to satisfy the media provider
 contract, which generally involves providing a consistent API for loading, managing, and
 tracking media state.

 Most the logic for this element is contained in the `Html5MediaElement` class because both the
 `<audio>` and `<video>` elements implement the native `HTMLMediaElement` interface. */
export declare const Video: React_2.ForwardRefExoticComponent<VdsReactComponentProps<VideoElement>>;

/** A slider control that lets the user specify their desired volume level. */
export declare const VolumeSlider: React_2.ForwardRefExoticComponent<VdsReactComponentProps<VolumeSliderElement>>;

export { }
